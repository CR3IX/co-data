{
    "message": "Parsed questions from uploaded question papers",
    "questions": [
        [
            {
                "pi": "1.2.1",
                "co": "1",
                "bl": "1",
                "marks": "2",
                "question": "Define the two parts of compilation.",
                "option": null,
                "subDivision": null,
                "no": "1"
            },
            {
                "pi": "1.2.2",
                "co": "1",
                "bl": "2",
                "marks": "2",
                "question": "Draw the transition diagram for relational operator.",
                "option": null,
                "subDivision": null,
                "no": "2"
            },
            {
                "pi": "1.2.1",
                "co": "1",
                "bl": "1",
                "marks": "2",
                "question": "Mention the role of lexical analyzer and its issues.",
                "option": null,
                "subDivision": null,
                "no": "3"
            },
            {
                "pi": "1.2.2",
                "co": "1",
                "bl": "2",
                "marks": "2",
                "question": "Differentiate between Lexeme,Token,pattern.",
                "option": null,
                "subDivision": null,
                "no": "4"
            },
            {
                "pi": "1.2.1",
                "co": "1",
                "bl": "1",
                "marks": "2",
                "question": "What are the various parts in LEX program?",
                "option": null,
                "subDivision": null,
                "no": "5"
            },
            {
                "pi": "1.2.1",
                "co": "2",
                "bl": "2",
                "marks": "2",
                "question": "Construct the syntax tree for the expression a=b*-c+b*-c",
                "option": null,
                "subDivision": null,
                "no": "6"
            },
            {
                "pi": "1.2.1",
                "co": "2",
                "bl": "1",
                "marks": "2",
                "question": "Define ambiguous grammar with an example.",
                "option": null,
                "subDivision": null,
                "no": "7"
            },
            {
                "pi": "1.2.1",
                "co": "2",
                "bl": "1",
                "marks": "2",
                "question": "Write short notes on Recursive Descent Parsing.",
                "option": null,
                "subDivision": null,
                "no": "8"
            },
            {
                "pi": "1.2.1",
                "co": "2",
                "bl": "2",
                "marks": "2",
                "question": "Compute FIRST and FOLLOW for the following grammar S → AS S →b A →SA A → a",
                "option": null,
                "subDivision": null,
                "no": "9"
            },
            {
                "pi": "2.4.3",
                "co": "2",
                "bl": "3",
                "marks": "10",
                "question": "Describe the various phases of the compiler with a neat sketch. Interpret theoutput of each phase of expression a:=b+c*50",
                "option": "A",
                "subDivision": null,
                "no": "10"
            },
            {
                "pi": "2.1.2",
                "co": "1",
                "bl": "2",
                "marks": "10",
                "question": "Illustrate diagrammatically how a language is processed.",
                "option": null,
                "subDivision": null,
                "no": "11"
            },
            {
                "pi": "2.1.2",
                "co": "2",
                "bl": "2",
                "marks": "10",
                "question": "Write short note on compiler construction tools.",
                "option": null,
                "subDivision": null,
                "no": "12"
            },
            {
                "pi": "2.1.2",
                "co": "3",
                "bl": "2",
                "marks": "10",
                "question": "Explain left recursion and Left factoring.",
                "option": null,
                "subDivision": null,
                "no": "13"
            }
        ],
        [
            {
                "pi": null,
                "co": "2",
                "bl": "2",
                "marks": "2",
                "question": "Differentiate Top down parser and bottom up parser.",
                "option": null,
                "subDivision": null,
                "no": "1"
            },
            {
                "pi": null,
                "co": "2",
                "bl": "1",
                "marks": "2",
                "question": "Define Handle. What do you mean by Handle Pruning?",
                "option": null,
                "subDivision": null,
                "no": "2"
            },
            {
                "pi": null,
                "co": "2",
                "bl": "1",
                "marks": "2",
                "question": "Name the various conflicts that occur during shift reduce parsing.",
                "option": null,
                "subDivision": null,
                "no": "3"
            },
            {
                "pi": null,
                "co": "2",
                "bl": "1",
                "marks": "2",
                "question": "Define LR (0) items.",
                "option": null,
                "subDivision": null,
                "no": "4"
            },
            {
                "pi": null,
                "co": "2",
                "bl": "1",
                "marks": "2",
                "question": "Give the structure for YACC program.",
                "option": null,
                "subDivision": null,
                "no": "5"
            },
            {
                "pi": null,
                "co": "3",
                "bl": "2",
                "marks": "2",
                "question": "Translate the expression a: =b*-c+b*- c into syntax tree.",
                "option": null,
                "subDivision": null,
                "no": "6"
            },
            {
                "pi": null,
                "co": "3",
                "bl": "1",
                "marks": "2",
                "question": "Write short notes on Annotated Parse Tree.",
                "option": null,
                "subDivision": null,
                "no": "7"
            },
            {
                "pi": null,
                "co": "3",
                "bl": "1",
                "marks": "2",
                "question": "Outline Synthesized and Inherited Attributes.",
                "option": null,
                "subDivision": null,
                "no": "8"
            },
            {
                "pi": null,
                "co": "3",
                "bl": "2",
                "marks": "2",
                "question": "How to check structural equivalence of two type expressions?",
                "option": null,
                "subDivision": null,
                "no": "9"
            },
            {
                "pi": null,
                "co": "2",
                "bl": "3",
                "marks": "10",
                "question": "Generate SLR parsing table for the following grammar and parse the input id+id*id            E->E+T|T            T->T*F|F            F->(E)|id",
                "option": "A",
                "subDivision": null,
                "no": "10"
            },
            {
                "pi": null,
                "co": "2",
                "bl": "3",
                "marks": "10",
                "question": "Consider the following grammar G:           S->CC           C->cC|dConstruct LALR Parsing table for the grammar Show the moves of parser on the string ccd.",
                "option": "B",
                "subDivision": null,
                "no": "10"
            },
            {
                "pi": null,
                "co": "3",
                "bl": "2",
                "marks": "10",
                "question": "Define three-address code. Describe the various methods of implementing three-address statements with an example. Give the translation scheme for converting the assignments into three address code",
                "option": "A",
                "subDivision": null,
                "no": "11"
            },
            {
                "pi": null,
                "co": "3",
                "bl": "2",
                "marks": "10",
                "question": "Elaborate on specification of Simple type checker.",
                "option": "B",
                "subDivision": null,
                "no": "11"
            }
        ]
    ]
}